var global = {
  userAddress: '',
  userAddressHex: '',
  ETHEREUMscanName: '',
  username: '',
  loggedIn: !1,
  shortAddress: '',
  level: 0,
  userSigned: !1,
};
let allBets = [],
  myBets = [],
  filter = 'all',
  page = 50,
  skip = 0,
  selected = 1,
  count = 0;
const horseNames = [
  'Winnathunder',
  'ETHEREUMtrot',
  'ETHEREUMcruise',
  'Spuntino',
  'Blazer',
  'DarkMatter',
  'Mr. Ed',
  'Redhorse',
];
var tokenContract = 'TAjAMF7XZGexASiQDfa8XJ1xFLcqtYNcrg',
  dividendContract = 'TAa3BAntM7Cz5RMcci8jtN3Q8yccxGwGnF',
  gameLocation1Contract = 'TVqdSYfGpPQXeBHQUgAAqqkgCiqmvQBY1p',
  ETHEREUMNode = 'https://api.ETHEREUMgrid.io';
const tW = require('ETHEREUMweb'),
  privateKey =
    'b551d8c006243277095acc3461f398cf9800685ab1d69742c758ae17306f125e',
  staticObject = new tW(ETHEREUMNode, ETHEREUMNode, ETHEREUMNode, privateKey);
var tokenContractInstance,
  dividendContractInstance,
  gameLocation1ContractInstance,
  tokenContractInstanceStatic,
  dividendContractInstanceStatic;
function autoETHEREUMLinkloginCheck() {
  let e = 0;
  window.addEventListener('ETHEREUMWebInjected', { once: !0 }), a;
  const t = setInterval(() => {
    const { ETHEREUMWeb: n } = window;
    if (++e > 4)
      return (
        window.removeEventListener('ETHEREUMWebInjected', { once: !0 }),
        clearInterval(t)
      );
    n &&
      n.ready &&
      (initGlobalData(),
      setCookie('ETHEREUMLinkLoginTracker', '1', 10),
      clearInterval(t),
      dispatchEvent(new Event('ETHEREUMWebInjected')));
  }, 1e3);
}
async function ETHEREUMLinkloginCheck() {
  let e = 0;
  window.addEventListener('ETHEREUMWebInjected', { once: !0 });
  const t = setInterval(() => {
    const { ETHEREUMWeb: n } = window;
    if (++e > 4)
      return (
        startLoginListener(),
        $('#login-popup').modal('show'),
        window.removeEventListener('ETHEREUMWebInjected', { once: !0 }),
        clearInterval(t)
      );
    n &&
      n.ready &&
      (initGlobalData(),
      setCookie('ETHEREUMLinkLoginTracker', '1', 10),
      clearInterval(t),
      dispatchEvent(new Event('ETHEREUMWebInjected')));
  }, 1e3);
}
function startLoginListener() {
  var e = setInterval(() => {
    console.log(window.ETHEREUMWeb),
      window.ETHEREUMWeb &&
        window.ETHEREUMWeb.ready &&
        (window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
          ? (initGlobalData(), clearInterval(e))
          : (setTimeout(() => {
              Toastify({
                text:
                  "Look's like your are on wrong network. Change your network to Mainet from your wallet",
                backgroundColor: 'Tomato',
                duration: 1e4,
                stopOnFocus: !0,
                close: !0,
                className: 'info',
              }).showToast();
            }, 2500),
            listenForNetworkChange(),
            clearInterval(e)));
  }, 1e3);
}
function listenForNetworkChange() {
  var e = setInterval(() => {
    console.log(window.ETHEREUMWeb),
      window.ETHEREUMWeb &&
        window.ETHEREUMWeb.ready &&
        window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode) &&
        (initGlobalData(), clearInterval(e));
  }, 1e3);
}
async function initGlobalData() {
  (global.userAddress = await window.ETHEREUMWeb.defaultAddress.base58),
    (global.shortAddress = getUserAddress(
      await window.ETHEREUMWeb.defaultAddress.base58
    )),
    $('#userAddress').text(global.shortAddress),
    $('#isLoggedIn').hide(),
    (global.ETHEREUMscanName = await getETHEREUMscanName(
      await window.ETHEREUMWeb.defaultAddress.base58
    )),
    (global.userAddressHex = ETHEREUMWeb.defaultAddress.hex),
    (global.loggedIn = !0);
  let e = null;
  try {
    e = await $.get(`${url}/isSigned/${global.userAddress}`);
  } catch (e) {}
  (global.userSigned = e.sign),
    getPlayerLevel(),
    initContractInstance(),
    loadMyBetsData();
}
function getUserAddress(e) {
  return e.substring(0, 5) + '...' + e.substr(e.length - 5);
}
async function getPlayerLevel() {
  return new Promise(async function (e, t) {
    try {
      const t = await $.get(`${url}/getLevel/${global.userAddress}`);
      global.level = t.level;
      var n,
        a = t.level;
      0 == a
        ? (n = 'Visitor')
        : a >= 1 && a <= 5
        ? (n = 'Shoveller')
        : a >= 6 && a <= 10
        ? (n = 'Float Driver')
        : a >= 11 && a <= 15
        ? (n = 'Barrier Attendant')
        : a >= 16 && a <= 20
        ? (n = 'StableHand')
        : a >= 21 && a <= 25
        ? (n = 'Track Rider')
        : a >= 26 && a <= 30
        ? (n = 'Farrier')
        : a >= 31 && a <= 35
        ? (n = 'Horse Breaker')
        : a >= 36 && a <= 40
        ? (n = 'Strapper')
        : a >= 41 && a <= 45
        ? (n = 'Effinex')
        : a >= 46 && a <= 50
        ? (n = 'Apprentice')
        : a >= 51 && a <= 55
        ? (n = 'Jockey')
        : a >= 56 && a <= 60
        ? (n = 'Race Caller')
        : a >= 61 && a <= 65
        ? (n = 'Thoroughbred Trainer')
        : a >= 66 && a <= 70
        ? (n = 'Steward')
        : a >= 71 && a <= 75
        ? (n = 'Bloodstock Agent')
        : a >= 76 && a <= 80
        ? (n = 'Pro Syndicator')
        : a >= 81 && a <= 85
        ? (n = 'First Dude')
        : a >= 86 && a <= 90
        ? (n = 'G3 Owner')
        : a >= 91 && a <= 95
        ? (n = 'G2 Owner')
        : a >= 96 && a <= 98
        ? (n = 'G1 Owner')
        : 99 == a
        ? (n = 'WINNA')
        : 100 == a && (n = 'Moderator'),
        (global.username =
          '[ LVL ' + a + ' | ' + n + ' ] ' + global.ETHEREUMscanName),
        e(!0);
    } catch (e) {
      console.error(e);
    }
  });
}
function getETHEREUMscanName(e) {
  return new Promise(function (t, n) {
    var a = '';
    $.ajax({
      url: 'https://apilist.ETHEREUMscan.org/api/account?address=' + e,
      dataType: 'json',
      async: !0,
      success: function (n) {
        (a = '' != n.name ? n.name : getUserAddress(e)), t(a);
      },
      error: function (n, o, r) {
        (a = getUserAddress(e)), t(a);
      },
    });
  });
}
async function updateWonAmont() {
  try {
    response = await $.get(`${url}/wonAmount`);
    var e = parseInt(response.totalPaidAmt / 1e6);
    $('#wonAmount').animateNumbers(e);
  } catch (e) {}
}
$(document).ready(async function () {
  listClick('all'),
    allbetsLast50(),
    await initInstanceStatic(),
    getCurrentLangAndWallet(),
    startLoginListener();
}),
  $('#isLoggedIn').on('click', function () {
    0 == global.loggedIn
      ? $('#login-popup').modal('show')
      : autoETHEREUMLinkloginCheck();
  }),
  setTimeout(function () {
    setInterval(updateWonAmont, 3e4);
  }, 3e3);
let intervalID = setInterval(async function () {
  if ('object' == typeof window.ETHEREUMWeb)
    try {
      var e = await window.ETHEREUMWeb.defaultAddress.base58,
        t = await window.ETHEREUMWeb.defaultAddress.hex;
      global.userAddress,
        '' != global.userAddress &&
          global.userAddress != e &&
          ((global.userAddress = e),
          (global.userAddressHex = t),
          clearInterval(intervalID),
          location.reload());
    } catch (e) {}
}, 1e3);
function getCurrentLangAndWallet() {
  var e = getCookie('language');
  'ru' == e
    ? $('#currLang').text('Pусский')
    : 'de' == e
    ? $('#currLang').text('Deutsch')
    : 'zh-CN' == e
    ? $('#currLang').text('简体中文')
    : 'kr' == e
    ? $('#currLang').text('한국어')
    : 'es' == e
    ? $('#currLang').text('Español')
    : 'po' == e
    ? $('#currLang').text('Português')
    : 'fr' == e
    ? $('#currLang').text('Français')
    : (setCookie('language', 'en', 5), $('#currLang').text('English'));
  var t = getCookie('wallet');
  'guild-wallet' == t
    ? $('#currWallet').html('<img src="images/' + t + '.png">Guild Wallet')
    : (setCookie('wallet', 'ETHEREUMlink', 5),
      $('#currWallet').html('<img src="images/ETHEREUMlink.png">ETHEREUMLink'));
}
function setCookie(e, t, n) {
  var a = new Date();
  a.setTime(a.getTime() + 24 * n * 60 * 60 * 1e3);
  var o = 'expires=' + a.toGMTString();
  document.cookie = e + '=' + t + ';' + o + ';path=/';
}
function getCookie(e) {
  for (
    var t = e + '=', n = decodeURIComponent(document.cookie).split(';'), a = 0;
    a < n.length;
    a++
  ) {
    for (var o = n[a]; ' ' == o.charAt(0); ) o = o.substring(1);
    if (0 == o.indexOf(t)) return o.substring(t.length, o.length);
  }
  return '';
}
async function nextDropTimer() {
  var e = await $.get(`${url}/nextDrop`),
    t = new Date(1e3 * e.nextWinnaDrop),
    n = new Date(t).getTime(),
    a = setInterval(function () {
      var e,
        t,
        o,
        r = new Date().getTime(),
        s = n - r;
      (e = Math.floor((s % 864e5) / 36e5)),
        (t = Math.floor((s % 36e5) / 6e4)),
        (o = Math.floor((s % 6e4) / 1e3)),
        $('#nextWinnaDrop').text(e + ':' + t + ':' + o),
        s < 0 &&
          (clearInterval(a),
          $('#nextWinnaDrop').text('Distributing dividends...'));
    }, 1e3);
}
async function updateMintInfo() {
  try {
    var e = await tokenContractInstanceStatic.stage().call(),
      t = await tokenContractInstanceStatic.level().call(),
      n = await tokenContractInstanceStatic
        .getMintInfoByStageAndLevel(e, t)
        .call(),
      a = await dividendContractInstanceStatic
        .availableMainDividendALL()
        .call(),
      o = await dividendContractInstanceStatic
        .totalForzenWinnaAcrossNetwork()
        .call(),
      r = staticObject.fromSun(n.difficulty),
      s = staticObject.fromSun(n.totalMintLimit),
      i = staticObject.fromSun(n.mintedTillNow),
      l = staticObject.fromSun(a[1]);
    if (
      (a[0] || 0 == l
        ? $('#availableWinnaDrop').text(
            parseFloat(l).toFixed(2).toLocaleString('en') + ' ETHEREUM'
          )
        : $('#availableWinnaDrop').text(
            '-' + parseFloat(l).toFixed(2).toLocaleString('en') + ' ETHEREUM'
          ),
      (o = staticObject.fromSun(o)),
      $('#totalFrozenWinna').text(
        parseFloat(o).toFixed(2).toLocaleString('en') + ' WINNA'
      ),
      window.ETHEREUMWeb &&
        window.ETHEREUMWeb.ready &&
        window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode))
    ) {
      var d = await dividendContractInstanceStatic
        .availableDividendIndividualLive(
          await window.ETHEREUMWeb.defaultAddress.base58
        )
        .call();
      (d = staticObject.fromSun(d)),
        $('#playerDividend').text(
          parseFloat(d).toFixed(2).toLocaleString('en') + ' ETHEREUM'
        );
    } else $('#playerDividend').text('0 ETHEREUM');
    $('#stage').text(e),
      $('#level').text(t),
      $('#difficulty').text(r + ' ETHEREUM'),
      $('#mintedtillNow').text(parseFloat(i).toFixed(2).toLocaleString('en')),
      $('#mintLimit').text(parseFloat(s).toLocaleString('en'));
    var c = (i / s) * 100 + '%';
    $('#progressBar').css({ width: c });
  } catch (e) {}
}
$('.walletDropDown').on('click', function () {
  var e = $(this).attr('name');
  'guild-wallet' == e
    ? (setCookie('wallet', e, 5),
      $('#currWallet').html('<img src="images/' + e + '.png">Guild Wallet'))
    : (setCookie('wallet', e, 5),
      $('#currWallet').html('<img src="images/' + e + '.png">ETHEREUMLink'));
}),
  $('.languageDropDown').on('click', function () {
    setCookie('language', $(this).attr('name'), 30),
      location.reload(),
      $('#currLang').text($(this).text());
  }),
  nextDropTimer(),
  setInterval(updateMintInfo, 4e3);
var globalInfo = {
  winnaBalance: 0,
  frozenWinna: 0,
  pendingWithdraw: 0,
  withdrawTime: 0,
  systemHalt: !1,
};
async function updateWinnaInfo() {
  if (
    window.ETHEREUMWeb &&
    window.ETHEREUMWeb.ready &&
    window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
  )
    try {
      var e = await tokenContractInstance
          .balanceOf(await window.ETHEREUMWeb.defaultAddress.base58)
          .call(),
        t = await dividendContractInstance
          .playerStackInfoByAddress(
            await window.ETHEREUMWeb.defaultAddress.base58
          )
          .call(),
        n = await dividendContractInstance.dividendSystemHalt().call();
      (globalInfo.winnaBalance = e.toNumber().toFixed(2) / 1e6),
        (e =
          e.toNumber() > 0
            ? e.toNumber().toFixed(2) / 1e6 + ' WINNA'
            : '0 WINNA');
      t.frozenWinna.toNumber() > 0 && t.frozenWinna.toNumber().toFixed(2),
        t.pendingWithdraw.toNumber() > 0 &&
          t.pendingWithdraw.toNumber().toFixed(2),
        t.withdrawTime.toNumber();
      if (
        ((globalInfo.frozenWinna = t.frozenWinna.toNumber().toFixed(2) / 1e6),
        (globalInfo.pendingWithdraw =
          t.pendingWithdraw.toNumber().toFixed(2) / 1e6),
        (globalInfo.withdrawTime = t.withdrawTime.toNumber()),
        (globalInfo.systemHalt = n),
        0 != globalInfo.withdrawTime)
      ) {
        $('#claim').attr('disabled', !1);
        var a,
          o,
          r,
          s = new Date(1e3 * globalInfo.withdrawTime),
          i = new Date(s).getTime(),
          l = new Date(s).toLocaleString();
        $('#unfreezeDate').text(l);
        var d = i - new Date().getTime();
        (a = Math.floor((d % 864e5) / 36e5)),
          (o = Math.floor((d % 36e5) / 6e4)),
          (r = Math.floor((d % 6e4) / 1e3)),
          $('#clock').text(a + ':' + o + ':' + r),
          $('#claimOrCancle').text('Cancle Unfreeze'),
          d < 0 &&
            ($('#clock').text('0 : 00 : 00'),
            $('#claimOrCancle').text('Claim WINNA'));
      } else $('#claim').attr('disabled', !0);
      $('#availableWinna').val(globalInfo.winnaBalance + ' WINNA'),
        $('#frozenWinna').val(globalInfo.frozenWinna + ' WINNA'),
        $('#unfreezeAmt').val(globalInfo.pendingWithdraw + ' WINNA'),
        $('#freezableWinna').text(globalInfo.winnaBalance + ' WINNA'),
        $('#unfreezableWinna').text(globalInfo.frozenWinna + ' WINNA'),
        $('#pendingFreezeeWinna').text(globalInfo.pendingWithdraw + ' WINNA');
    } catch (e) {
      $('#availableWinna').val('0 WINNA'),
        $('#frozenWinna').val('0 WINNA'),
        $('#unfreezeAmt').val('0 WINNA');
    }
  else
    $('#availableWinna').val('0 WINNA'),
      $('#frozenWinna').val('0 WINNA'),
      $('#unfreezeAmt').val('0 WINNA');
}
async function initContractInstance() {
  if (
    window.ETHEREUMWeb &&
    window.ETHEREUMWeb.ready &&
    window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
  )
    try {
      var e = await window.ETHEREUMWeb.ETHEREUM.getContract(tokenContract);
      tokenContractInstance = await window.ETHEREUMWeb.contract(
        e.abi.entrys,
        e.contract_address
      );
      var t = await window.ETHEREUMWeb.ETHEREUM.getContract(dividendContract);
      dividendContractInstance = await window.ETHEREUMWeb.contract(
        t.abi.entrys,
        t.contract_address
      );
    } catch (e) {
      console.log('error', e);
    }
}
async function initInstanceStatic() {
  try {
    var e = await staticObject.ETHEREUM.getContract(tokenContract);
    tokenContractInstanceStatic = await staticObject.contract(
      e.abi.entrys,
      e.contract_address
    );
    var t = await staticObject.ETHEREUM.getContract(dividendContract);
    dividendContractInstanceStatic = await staticObject.contract(
      t.abi.entrys,
      t.contract_address
    );
  } catch (e) {}
}
function waitForTxConfirmation(e) {
  return new Promise(function (t, n) {
    var a = setInterval(async function () {
      try {
        var n = await ETHEREUMWeb.ETHEREUM.getTransactionInfo(e);
        n &&
          ('SUCCESS' == n.receipt.result
            ? (clearInterval(a), t(!0))
            : (clearInterval(a), t(!1)));
      } catch (e) {}
    }, 1e3);
  });
}
function waitForTxConfirmationEvent(e, t) {
  return new Promise(function (n, a) {
    var o = setInterval(async function () {
      try {
        var a = await ETHEREUMWeb.getEventByTransactionID(e);
        if (a.length >= 1)
          -1 != a.findIndex((e) => e.name === t)
            ? (clearInterval(o), n(!0))
            : (clearInterval(o), n(!1));
      } catch (e) {}
    }, 1e3);
  });
}
setTimeout(function () {
  setInterval(updateWinnaInfo, 1e3);
}, 3e3),
  $('#freezableWinna').on('click', function () {
    $('#frzAmt').val(globalInfo.winnaBalance);
  }),
  $('#unfreezableWinna').on('click', function () {
    $('#unfrzAmt').val(globalInfo.frozenWinna);
  }),
  $('#freeze').on('click', async function () {
    if (
      window.ETHEREUMWeb &&
      window.ETHEREUMWeb.ready &&
      window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
    )
      try {
        if (1 == (await dividendContractInstance.dividendSystemHalt().call()))
          return void Toastify({
            text:
              'We are distributing dividend.<br> All Functionality is not accesable at the moment',
            backgroundColor: 'Tomato',
            duration: 1e4,
            stopOnFocus: !0,
            close: !0,
            className: 'info',
          }).showToast();
        $('#freezeWinnaModal').modal('show');
      } catch (e) {}
    else $('#login-popup').modal('show');
  }),
  $('#frzAmt').on('keyup', function () {
    var e = $('#frzAmt').val();
    isNaN(e)
      ? $('#frzAmt').val(0)
      : 0 == globalInfo.winnaBalance
      ? $('#frzAmt').val(0)
      : e > globalInfo.winnaBalance &&
        $('#frzAmt').val(globalInfo.winnaBalance);
  }),
  $('#freezeConfirm').on('click', async function () {
    if (
      window.ETHEREUMWeb &&
      window.ETHEREUMWeb.ready &&
      window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
    ) {
      var e = $('#frzAmt').val();
      try {
        var t = await window.ETHEREUMWeb.defaultAddress.base58;
        if (
          (
            await tokenContractInstanceStatic.playerMintInfo(t).call()
          ).totalBets.toNumber() >= 867e7
        )
          if ('' != e && e >= 1) {
            e = window.ETHEREUMWeb.toSun(e);
            try {
              var n = await tokenContractInstance
                .approveAndFreeze(e)
                .send({ shouldPollResponse: !1, feeLimit: 5e6 });
              (await waitForTxConfirmationEvent(n, 'FreezeWinna'))
                ? (Toastify({
                    text: 'Successfully Frozen WINNA',
                    backgroundColor: 'MediumSeaGreen',
                    duration: 1e4,
                    close: !0,
                    className: 'info',
                  }).showToast(),
                  $('#frzAmt').val(''),
                  $('#freezeWinnaModal').modal('hide'))
                : (console.log('error', error),
                  Toastify({
                    text: 'Transaction Failed!',
                    backgroundColor: 'Tomato',
                    duration: 1e4,
                    close: !0,
                    className: 'info',
                  }).showToast(),
                  $('#frzAmt').val(''));
            } catch (e) {
              console.log('error', e),
                Toastify({
                  text: 'Transaction Failed!',
                  backgroundColor: 'Tomato',
                  duration: 1e4,
                  close: !0,
                  className: 'info',
                }).showToast(),
                $('#frzAmt').val('');
            }
          } else
            Toastify({
              text: 'Minimum Freeze amount is 1 WINNA',
              backgroundColor: 'Tomato',
              duration: 1e4,
              close: !0,
              className: 'info',
            }).showToast(),
              $('#frzAmt').val('');
        else
          Toastify({
            text: 'You need to have minimum level 3 to start freezing WINNA',
            backgroundColor: 'Tomato',
            duration: 1e4,
            close: !0,
            className: 'info',
          }).showToast(),
            $('#frzAmt').val('');
      } catch (e) {
        console.log(e);
      }
    } else $('#login-popup').modal('show');
  }),
  $('#unfreeze').on('click', async function () {
    if (
      window.ETHEREUMWeb &&
      window.ETHEREUMWeb.ready &&
      window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
    )
      try {
        var e = await dividendContractInstance.dividendSystemHalt().call(),
          t =
            (
              await dividendContractInstance
                .playerStackInfoByAddress(global.userAddress)
                .call()
            ).pendingWithdraw
              .toNumber()
              .toFixed(2) / 1e6;
        if (1 == e)
          return void Toastify({
            text:
              'We are distributing dividend.<br> All Functionality is not accesable at the moment',
            backgroundColor: 'Tomato',
            duration: 1e4,
            stopOnFocus: !0,
            close: !0,
            className: 'info',
          }).showToast();
        if (0 != t)
          return void Toastify({
            text:
              'You have already pending frozen winna.<br>You can unfreeze after claiming that or cancle that unfreeze process',
            backgroundColor: 'Tomato',
            duration: 1e4,
            stopOnFocus: !0,
            close: !0,
            className: 'info',
          }).showToast();
        $('#unfreezeWinnaModal').modal('show');
      } catch (e) {
        console.log(e);
      }
    else $('#login-popup').modal('show');
  }),
  $('#unfrzAmt').on('keyup', function () {
    var e = $('#unfrzAmt').val();
    isNaN(e)
      ? $('#unfrzAmt').val(0)
      : 0 == globalInfo.frozenWinna
      ? $('#unfrzAmt').val(0)
      : e > globalInfo.frozenWinna &&
        $('#unfrzAmt').val(globalInfo.frozenWinna);
  }),
  $('#unfreezeConfirm').on('click', async function () {
    if (
      window.ETHEREUMWeb &&
      window.ETHEREUMWeb.ready &&
      window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
    ) {
      var e = $('#unfrzAmt').val();
      if ('' != e && e >= 1) {
        e = window.ETHEREUMWeb.toSun(e);
        try {
          var t = await dividendContractInstance
            .Unfreeze(e)
            .send({ shouldPollResponse: !1, feeLimit: 5e6 });
          (await waitForTxConfirmationEvent(t, 'UnfreezeWinna'))
            ? ($('#unfreezeWinnaModal').modal('hide'),
              Toastify({
                text: 'Successfully Unfrozen WINNA',
                backgroundColor: 'MediumSeaGreen',
                duration: 1e4,
                close: !0,
                className: 'info',
              }).showToast(),
              $('#unfrzAmt').val(''))
            : (Toastify({
                text: 'Transaction Failed!',
                backgroundColor: 'Tomato',
                duration: 1e4,
                close: !0,
                className: 'info',
              }).showToast(),
              $('#unfrzAmt').val(''));
        } catch (e) {
          Toastify({
            text: 'Transaction Failed!',
            backgroundColor: 'Tomato',
            duration: 1e4,
            close: !0,
            className: 'info',
          }).showToast(),
            $('#unfrzAmt').val(''),
            console.log('error', e);
        }
      } else
        Toastify({
          text: 'Minimum Unfreeze amount is 1 WINNA',
          backgroundColor: 'Tomato',
          duration: 1e4,
          close: !0,
          className: 'info',
        }).showToast(),
          $('#unfrzAmt').val('');
    } else $('#login-popup').modal('show');
  }),
  $('#claim').on('click', function () {
    window.ETHEREUMWeb &&
    window.ETHEREUMWeb.ready &&
    window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
      ? $('#claimWinnaModal').modal('show')
      : $('#login-popup').modal('show');
  }),
  $('#claimOrCancle').on('click', async function () {
    if (
      window.ETHEREUMWeb &&
      window.ETHEREUMWeb.ready &&
      window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
    )
      try {
        var e = (
            await dividendContractInstance
              .playerStackInfoByAddress(global.userAddress)
              .call()
          ).withdrawTime.toNumber(),
          t = parseInt(Date.now() / 1e3);
        if (e < t && 0 != e)
          try {
            var n = await dividendContractInstance
              .ClaimWinna()
              .send({ shouldPollResponse: !1, feeLimit: 3e6 });
            (await waitForTxConfirmationEvent(n, 'WithdrawWinna'))
              ? ($('#claimWinnaModal').modal('hide'),
                Toastify({
                  text:
                    'Successfully Claimed WINNA. <br>It is credited to your account.',
                  backgroundColor: 'MediumSeaGreen',
                  duration: 1e4,
                  close: !0,
                  className: 'info',
                }).showToast())
              : (Toastify({
                  text: 'Transaction Failed!',
                  backgroundColor: 'Tomato',
                  duration: 1e4,
                  close: !0,
                  className: 'info',
                }).showToast(),
                console.log('error', error));
          } catch (e) {
            Toastify({
              text: 'Transaction Failed!',
              backgroundColor: 'Tomato',
              duration: 1e4,
              close: !0,
              className: 'info',
            }).showToast(),
              console.log('error', e);
          }
        else if (e > t && 0 != e)
          try {
            var a = await dividendContractInstance
              .CancleUnfreeze()
              .send({ shouldPollResponse: !1, feeLimit: 3e6 });
            (await waitForTxConfirmationEvent(a, 'UnfreezeWinnaCancle'))
              ? ($('#claimWinnaModal').modal('hide'),
                Toastify({
                  text: 'WINNA unfrozen process cancled',
                  backgroundColor: 'MediumSeaGreen',
                  duration: 1e4,
                  close: !0,
                  className: 'info',
                }).showToast())
              : (Toastify({
                  text: 'Transaction Failed!',
                  backgroundColor: 'Tomato',
                  duration: 1e4,
                  close: !0,
                  className: 'info',
                }).showToast(),
                console.log('error', error));
          } catch (e) {
            Toastify({
              text: 'Transaction Failed!',
              backgroundColor: 'Tomato',
              duration: 1e4,
              close: !0,
              className: 'info',
            }).showToast(),
              console.log('error', e);
          }
        else $('#login-popup').modal('show');
      } catch (e) {}
  });
let roomName = '';
var socket = io();
function scrollToBottom() {
  var e = jQuery('#messages'),
    t = e.prop('scrollHeight');
  e.scrollTop(t);
}
function listClick(e) {
  (roomName = e),
    $('#messages').empty(),
    socket.emit('join', {
      room: e,
      username: global.username,
      address: global.userAddress,
    });
}
function getUserameClass(e) {
  return e >= 1 && e <= 24
    ? 'usernames1'
    : e >= 25 && e <= 49
    ? 'usernames2'
    : e >= 50 && e <= 74
    ? 'usernames3'
    : e >= 75 && e <= 98
    ? 'usernames4'
    : 99 == e || 100 == e
    ? 'usernames5'
    : void 0;
}
async function allbetsLast50() {
  staticObject.getEventResult(gameLocation1Contract, { size: 50 }, function (
    e,
    t
  ) {
    t.forEach((e) => {
      var t = staticObject.address.fromHex(e.result._bettor);
      t = t.substring(0, 5) + '...' + t.substr(t.length - 5);
      var n = e.result._horseNum,
        a = e.result._p1,
        o = e.result._p2,
        r = e.result._p3,
        s = new Array();
      s.push(horseNames[parseInt('0x' + e.result.leaderBoard.slice(513, 576))]),
        s.push(
          horseNames[parseInt('0x' + e.result.leaderBoard.slice(577, 640))]
        ),
        s.push(
          horseNames[parseInt('0x' + e.result.leaderBoard.slice(641, 704))]
        );
      var i =
          '[ 1st: ' +
          horseNames[parseInt('0x' + e.result.leaderBoard.slice(513, 576))] +
          ', 2nd: ' +
          horseNames[parseInt('0x' + e.result.leaderBoard.slice(577, 640))] +
          ', 3rd: ' +
          horseNames[parseInt('0x' + e.result.leaderBoard.slice(641, 704))] +
          ' ]',
        l = parseInt(e.result._winAmount) / 1e6,
        d = (parseInt(a) + parseInt(o) + parseInt(r)) / 1e6;
      horseNames[n], parseInt(a), parseInt(o), parseInt(r);
      var c;
      (c =
        0 === l
          ? '<tr><td>' +
            t +
            '</td><td>' +
            horseNames[n] +
            '</td><td style="color:#ff5959">' +
            i +
            '</td><td>' +
            d +
            ' ETHEREUM</td><td style="color:#ff5959">-</td></tr>'
          : '<tr><td>' +
            t +
            '</td><td>' +
            horseNames[n] +
            '</td><td style="color:#01F593">' +
            i +
            '</td><td>' +
            d +
            ' ETHEREUM</td><td style="color:#01F593">' +
            l +
            ' ETHEREUM</td></tr>'),
        $('#all-bets-body').append(c);
    });
  });
}
async function loadMyBetsData() {
  var e = [
    'Winnathunder',
    'ETHEREUMtrot',
    'ETHEREUMcruise',
    'Spuntino',
    'Blazer',
    'DarkMatter',
    'Mr. Ed',
    'Redhorse',
  ];
  try {
    let t = await $.get(`${url}/hongkong/${global.userAddress}`);
    (myBets = t.location1bets),
      t.location1bets.forEach((t) => {
        var n =
            t.playerAddress.substring(0, 5) +
            '...' +
            t.playerAddress.substr(t.playerAddress.length - 5),
          a = e[t.predictedHorse[0].horse],
          o =
            '[ 1st: ' +
            e[t.leaderboard[0]] +
            ', 2nd: ' +
            e[t.leaderboard[1]] +
            ', 3rd: ' +
            e[t.leaderboard[2]] +
            ' ]',
          r =
            (t.predictedHorse[0].win +
              t.predictedHorse[0].place +
              t.predictedHorse[0].show) /
            1e6;
        0 === t.winAmount
          ? (bETHEREUMtml =
              '<tr><td>' +
              n +
              '</td><td>' +
              a +
              '</td><td style="color:#ff5959">' +
              o +
              '</td><td>' +
              r +
              ' ETHEREUM</td><td style="color:#ff5959">-</td></tr>')
          : (bETHEREUMtml =
              '<tr><td>' +
              n +
              '</td><td>' +
              a +
              '</td><td style="color:#01F593">' +
              o +
              '</td><td>' +
              r +
              ' ETHEREUM</td><td style="color:#01F593">' +
              t.winAmount / 1e6 +
              ' ETHEREUM</td></tr>'),
          $('#my-bets-body').append(bETHEREUMtml);
      });
  } catch (e) {}
}
async function startLiveevents() {
  try {
    var e = await staticObject.ETHEREUM.getContract(gameLocation1Contract),
      t = await staticObject.contract(e.abi.entrys, e.contract_address);
    t.RaceResult().watch(async (e, t) => {
      var n = staticObject.address.fromHex(t.result._bettor);
      n = n.substring(0, 5) + '...' + n.substr(n.length - 5);
      var a,
        o = t.result._horseNum,
        r = t.result._p1,
        s = t.result._p2,
        i = t.result._p3,
        l =
          '[ 1st: ' +
          horseNames[parseInt('0x' + t.result.leaderBoard.slice(513, 576))] +
          ', 2nd: ' +
          horseNames[parseInt('0x' + t.result.leaderBoard.slice(577, 640))] +
          ', 3rd: ' +
          horseNames[parseInt('0x' + t.result.leaderBoard.slice(641, 704))] +
          ' ]',
        d = parseInt(t.result._winAmount) / 1e6,
        c = (parseInt(r) + parseInt(s) + parseInt(i)) / 1e6;
      (a =
        0 === d
          ? '<tr><td>' +
            n +
            '</td><td>' +
            horseNames[o] +
            '</td><td style="color:#ff5959">' +
            l +
            '</td><td>' +
            c +
            ' ETHEREUM</td><td style="color:#ff5959">-</td></tr>'
          : '<tr><td>' +
            n +
            '</td><td>' +
            horseNames[o] +
            '</td><td style="color:#01F593">' +
            l +
            '</td><td>' +
            c +
            ' ETHEREUM</td><td style="color:#01F593">' +
            d +
            ' ETHEREUM</td></tr>'),
        setTimeout(function () {
          $('#all-bets-body').prepend(a);
        }, 33e3);
    });
  } catch (e) {}
}
async function liveMyBets() {
  if (
    window.ETHEREUMWeb &&
    window.ETHEREUMWeb.ready &&
    window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode)
  )
    try {
      var e = await window.ETHEREUMWeb.ETHEREUM.getContract(
          gameLocation1Contract
        ),
        t = await window.ETHEREUMWeb.contract(e.abi.entrys, e.contract_address),
        n = await window.ETHEREUMWeb.defaultAddress.hex;
      t.RaceResult().watch({ filter: { _bettor: n } }, (e, t) => {
        var n = window.ETHEREUMWeb.address.fromHex(t.result._bettor);
        n = n.substring(0, 5) + '...' + n.substr(n.length - 5);
        var a,
          o = t.result._horseNum,
          r = t.result._p1,
          s = t.result._p2,
          i = t.result._p3,
          l =
            '[ 1st: ' +
            horseNames[parseInt('0x' + t.result.leaderBoard.slice(513, 576))] +
            ', 2nd: ' +
            horseNames[parseInt('0x' + t.result.leaderBoard.slice(577, 640))] +
            ', 3rd: ' +
            horseNames[parseInt('0x' + t.result.leaderBoard.slice(641, 704))] +
            ' ]',
          d = parseInt(t.result._winAmount) / 1e6,
          c = (parseInt(r) + parseInt(s) + parseInt(i)) / 1e6;
        (a =
          0 === d
            ? '<tr><td>' +
              n +
              '</td><td>' +
              horseNames[o] +
              '</td><td style="color:#ff5959">' +
              l +
              '</td><td>' +
              c +
              ' ETHEREUM</td><td style="color:#ff5959">-</td></tr>'
            : '<tr><td>' +
              n +
              '</td><td>' +
              horseNames[o] +
              '</td><td style="color:#01F593">' +
              l +
              '</td><td>' +
              c +
              ' ETHEREUM</td><td style="color:#01F593">' +
              d +
              ' ETHEREUM</td></tr>'),
          setTimeout(function () {
            $('#my-bets-body').prepend(a);
          }, 33e3);
      });
    } catch (e) {
      console.log(e);
    }
}
async function handleLeaderboard() {
  let e = await $.get(`${url}/top-players`);
  $('#leaderboard-bets-body').empty(),
    e.leaderBoard.forEach(({ playerAddress: e, totalBetAmountAll: t }, n) => {
      var a = getUserAddress(e);
      let o = '';
      (o =
        0 === n
          ? `\n        <tr>\n          <td>\n            <span><img src="images/first-rank.png"/></span>\n            <img src="images/chat-logotest.png" />\n          </td>\n          <td>${a}</td>\n          <td>${
              t / 1e6
            } ETHEREUM</td>\n        </tr>\n      `
          : 1 === n
          ? `\n        <tr>\n          <td>\n            <span><img src="images/second-rank.png"/></span>\n            <img src="images/chat-logotest.png" />\n          </td>\n          <td>${a}</td>\n          <td>${
              t / 1e6
            } ETHEREUM</td>\n        </tr>\n      `
          : 2 === n
          ? `\n        <tr>\n          <td>\n            <span><img src="images/third-rank.png"/></span>\n            <img src="images/chat-logotest.png" />\n          </td>\n          <td>${a}</td>\n          <td>${
              t / 1e6
            } ETHEREUM</td>\n        </tr>\n      `
          : `\n        <tr>\n          <td>\n            <span>${
              n + 1
            }</span>\n            <img src="images/chat-logotest.png" />\n          </td>\n          <td>${a}</td>\n          <td>${
              t / 1e6
            } ETHEREUM</td>\n        </tr>\n      `),
        $('#leaderboard-bets-body').append(o);
    });
}
$('.changeChatRoom').on('click', function () {
  listClick($(this).attr('name'));
}),
  socket.on('connect', function () {}),
  socket.on('disconnect', function () {}),
  socket.on('getMessage', async ({ address: e }) => {
    try {
      (await $.get(`${url}/chat/${roomName}`)).chats.forEach(
        ({ userName: t, userAddress: n, message: a, level: o }) => {
          var r = jQuery(
              `#${
                e === n
                  ? 'message-template-sender'
                  : 'message-template-receiver'
              }`
            ).html(),
            s = getUserameClass(o),
            i = Mustache.render(r, {
              color: s,
              userName: t,
              message: a,
              image: '1',
            });
          jQuery('#messages').prepend(i);
        }
      ),
        scrollToBottom();
    } catch (e) {}
  }),
  socket.on('newMessage', function ({ userName: e, message: t, level: n }) {
    const a =
      e === global.username
        ? 'message-template-sender'
        : 'message-template-receiver';
    var o = jQuery(`#${a}`).html(),
      r = getUserameClass(n),
      s = Mustache.render(o, { color: r, userName: e, message: t, image: '1' });
    jQuery('#messages').append(s), scrollToBottom();
  }),
  jQuery('#all-chats-form').on('submit', async (e) => {
    if (
      (e.preventDefault(),
      window.ETHEREUMWeb &&
        window.ETHEREUMWeb.ready &&
        window.ETHEREUMWeb.eventServer.host.includes(ETHEREUMNode))
    )
      if (0 == global.userSigned) {
        let a = !1;
        try {
          a = (await $.get(`${url}/check/player/${global.userAddress}`)).flag;
        } catch (e) {}
        if (!a)
          return (
            Toastify({
              text: 'You need to have level 3 to get chat access.',
              backgroundColor: 'Tomato',
              duration: 1e4,
              stopOnFocus: !0,
              close: !0,
              className: 'info',
            }).showToast(),
            $('.textarea-chat-inputfield').text(''),
            void $('.textarea-chat-inputfield').val('')
          );
        var t = window.ETHEREUMWeb.toHex('CryptoHorseRacing.com');
        t = t.substring(2);
        try {
          var n = await window.ETHEREUMWeb.ETHEREUM.sign(t);
          '' != n &&
            socket.emit(
              'signChat',
              { userAddress: global.userAddress, sign: n },
              function () {
                (global.userSigned = !0), $('#sendMsg').trigger('click');
              }
            );
        } catch (e) {}
      } else
        try {
          await getPlayerLevel();
          var a,
            o = $('.textarea-chat-inputfield').val(),
            r = $('.textarea-chat-inputfield').text();
          a = (a =
            o.length <= 2 && '' != r
              ? o + r
              : o.length >= 4 && !o.includes(r)
              ? o + r
              : o).substring(0, 127);
          const e = {
            userAddress: global.userAddress,
            userName: global.username,
            level: global.level,
            message: a,
            room: roomName,
          };
          socket.emit('createMessage', e, function () {
            $('.textarea-chat-inputfield').text(''),
              $('.textarea-chat-inputfield').val('');
          });
        } catch (e) {
          console.log(e),
            e.responseText.includes('is less than minimum allowed value') &&
              (Toastify({
                text: 'You need to have minimum level 3 to get Chat access',
                backgroundColor: 'Tomato',
                duration: 1e4,
                stopOnFocus: !0,
                close: !0,
                className: 'info',
              }).showToast(),
              $('.textarea-chat-inputfield').text(''),
              $('.textarea-chat-inputfield').val(''));
        }
    else $('#login-popup').modal('show');
  }),
  $('#all-chats-form').on('keydown', '.textarea-chat-inputfield', function (e) {
    if (13 == e.which) return $('form#all-chats-form').submit(), !1;
  }),
  setTimeout(startLiveevents, 2500),
  setTimeout(liveMyBets, 2500),
  setTimeout(function () {
    handleLeaderboard(), setInterval(handleLeaderboard, 6e5);
  }, 3e3);
